diff -uNr srs-milter-master/README.md srs-milter-0.0.2/README.md
--- srs-milter-master/README.md	2014-11-21 19:30:38.000000000 +0100
+++ srs-milter-0.0.2/README.md	2015-02-18 00:32:38.000000000 +0100
@@ -3,17 +3,10 @@
 
 This milter implemets SRS (Sender Rewriting Scheme) that can be used to fix envelope MAIL FROM for forwarded mails protected by SPF. It can be configured in two modes for:
 
-* Incoming mail -- rewrite RCPT TO addresses in SRS format back
-* Outgoing mail -- rewrite MAIL FROM address to SRS format
-
-
-Download
---------
-
-The original source of srs-milter can be found here: http://kmlinux.fjfi.cvut.cz/~vokacpet/activities/srs-milter/
-
-It has been updated and tweaked by emsearcy and Driskell and distributed via GitHub.
+* Incoming mail - rewrite RCPT TO addresses in SRS format back
+* Outgoing mail - rewrite MAIL FROM address to SRS format
 
+SRS secrets can be provided securely inside a file. For quick testing and backwards compatibility with old configurations, they can still be provided insecurely on the command line.
 
 Dependencies
 ------------
@@ -25,6 +18,18 @@
 
 Both libraries contain several patches that are not part of official source code but comes from different distributions (debian, freebsd).
 
+Installation
+------------
+
+### Building sources
+
+* clone github srs-milter repository
+* compile source in `src` subdirectory using `make` command
+* startup script/unit available in `dist` subdirectory
+
+### RPM packages
+
+Source and binary packages for RHEL/CentOS/Fedora available in repositories at http://copr.fedoraproject.org/coprs/vokac/srs-milter/
 
 Configuration
 -------------
@@ -71,8 +76,34 @@
 
 * NOTE: If you use virtual_alias_maps for outgoing mails to change recipient address you can't use same smtpd with srs-milter (it doesn't see changes from rewriting virtual aliases). In main.cf you can define new smtpd that listens on different port and forward all outgoing mails throught this smtpd configured with srs-milter.
 
+Service startup
+---------------
+
+SysV initscript (service configuration via /etc/sysconfig/srs-milter):
+  ```
+  # enable srs-milter service
+  /sbin/chkconfig srs-milter on
+  # start srs-milter service
+  /sbin/service srs-milter start
+  ```
+
+Systemd (service configuration via /etc/srs-milter.*.conf files):
+  ```
+  # enable srs-milter service
+  systemctl enable srs-milter@default
+  # start srs-milter service
+  systemctl start srs-milter@default
+  ```
+
 Other notes
 -----------
 
 From http://kmlinux.fjfi.cvut.cz/~vokacpet/:
 I use this milter on low traffic site (~ 30k mails a day) without problems (currently ~ 500k mails in reverse mode and ~ 50k mails in forward mode). But still it is basically quick hack for my current needs and the code is far from being nice and clean.
+
+Contributors
+------------
+
+[vokacpet](http://kmlinux.fjfi.cvut.cz/~vokacpet/) (Original author)<br>
+[emsearcy](https://github.com/emsearcy)<br>
+[Driskell](https://github.com/driskell) &lt;packages at jasonwoods me uk&gt;
diff -uNr srs-milter-master/src/Makefile srs-milter-0.0.2/src/Makefile
--- srs-milter-master/src/Makefile	2014-11-21 19:30:38.000000000 +0100
+++ srs-milter-0.0.2/src/Makefile	2015-01-27 03:22:04.000000000 +0100
@@ -1,11 +1,12 @@
 BINDIR =	/usr/sbin
 MANDIR =	/usr/man/man8
 #CC =		gcc
+DEBUG =		-g3
 DEFINES =	
 INCDIRS =	
 LIBDIRS =	
-CFLAGS =	-Wall $(DEFINES) $(INCDIRS)
-LDFLAGS =	-g3 $(LIBDIRS)
+CFLAGS =	-Wall $(DEBUG) $(DEFINES) $(INCDIRS)
+LDFLAGS =	$(DEBUG) $(LIBDIRS)
 INSTALL =	/usr/bin/install
 
 all:			srs-filter
diff -uNr srs-milter-master/src/srs-filter.c srs-milter-0.0.2/src/srs-filter.c
--- srs-milter-master/src/srs-filter.c	2014-11-21 19:30:38.000000000 +0100
+++ srs-milter-0.0.2/src/srs-filter.c	2015-02-26 10:50:22.000000000 +0100
@@ -30,29 +30,39 @@
 #define SS_STATE_INVALID_CONN     0x01
 #define SS_STATE_INVALID_MSG      0x02
 
+#define MAXBUF 1024
+
 /* Global variables */
 static pthread_key_t key;
 static int connections = 0;
 static int threads = 0;
+
 /* these should be read from command line or config file */
-static int CONFIG_verbose = 0;
-static int CONFIG_forward = 0;
-static int CONFIG_reverse = 0;
-static char *CONFIG_socket = NULL;
-static char **CONFIG_domains = NULL;
-static int CONFIG_spf_check = 0;
-static char *CONFIG_spf_heloname = NULL;
-static union {
-   struct sockaddr_in in;
-   struct sockaddr_in6 in6;
-} CONFIG_spf_address;
-static char *CONFIG_srs_domain = NULL;
-static char **CONFIG_srs_secrets = NULL;
-static int CONFIG_srs_alwaysrewrite = 0;
-static int CONFIG_srs_hashlength = 0;
-static int CONFIG_srs_hashmin = 0;
-static int CONFIG_srs_maxage = 0;
-static char CONFIG_srs_separator = 0;
+typedef struct {
+  int verbose;
+  char *pidfile;
+  int forward;
+  int reverse;
+  char *socket;
+  int timeout;
+  char **domains;
+  int spf_check;
+  char *spf_heloname;
+  union {
+    struct sockaddr_in in;
+    struct sockaddr_in6 in6;
+  } spf_address;
+  int spf_address_defined;
+  char *srs_domain;
+  char **srs_secrets;
+  int srs_alwaysrewrite;
+  int srs_hashlength;
+  int srs_hashmin;
+  int srs_maxage;
+  char srs_separator;
+} config_t;
+
+config_t config;
 
 
 /* Per-connection data structure. */
@@ -73,42 +83,169 @@
 
 
 
-char *srs_milter_load_file_secrets(char ***CONFIG_srs_secrets, char *secrets_file) {
-  int i, l;
-  FILE *f;
-  char buffer[1026];
+int srs_milter_configure(const char *key, const char *val) {
+#define CHECK_VALUE(key) \
+    if (val == NULL || *val == '\0') { \
+      fprintf(stderr, "ERROR: missing %s value\n", key); \
+      return 1; \
+    }
 
-  f = fopen(secrets_file, "r");
-  if (f == NULL)
-    return "ERROR: Failed to open secrets file!\n";
-
-  while (fgets(buffer, 1026, f)) {
-    l = strlen(buffer);
-    if (l == 1 && buffer[0] == '\n')
-      continue;
+  if (strcmp(key, "verbose") == 0) {
+    config.verbose = 1;
+
+  } else if (strcmp(key, "pidfile") == 0) {
+    CHECK_VALUE(key);
+
+    if (config.pidfile)
+      free(config.pidfile);
+    config.pidfile = strdup(val);
+
+  } else if (strcmp(key, "socket") == 0) {
+    CHECK_VALUE(key);
+
+    if (config.socket)
+      free(config.socket);
+    config.socket = strdup(val);
+
+  } else if (strcmp(key, "timeout") == 0) {
+    CHECK_VALUE(key);
+
+    config.timeout = atoi(val);
+
+  } else if (strcmp(key, "forward") == 0) {
+    config.forward = 1;
 
-    if (l == 1026 && buffer[1025] != '\n') {
-      fclose(f);
-      return "ERROR: Line too long in secrets file!\n";
+  } else if (strcmp(key, "reverse") == 0) {
+    config.reverse = 1;
+
+  } else if (strcmp(key, "local-domain") == 0) {
+    CHECK_VALUE(key);
+
+    int i = 0;
+    if (!config.domains) {
+      config.domains = (char **) malloc((i+2)*sizeof(char *));
+    } else {
+      while (config.domains[i]) i++;
+      config.domains = (char **) realloc(config.domains, (i+2)*sizeof(char *));
     }
+    config.domains[i] = strdup(val);
+    config.domains[i+1] = NULL;
 
-    if (buffer[l-1] == '\n')
-      buffer[l-1] = 0;
+  } else if (strcmp(key, "srs-domain") == 0) {
+    CHECK_VALUE(key);
 
-    i = 0;
-    if (!*CONFIG_srs_secrets) {
-      *CONFIG_srs_secrets = (char **) malloc((i+2)*sizeof(char *));
+    if (config.srs_domain)
+      free(config.srs_domain);
+    config.srs_domain = strdup(val);
+
+  } else if (strcmp(key, "srs-secret") == 0) {
+    CHECK_VALUE(key);
+
+    int i = 0;
+    if (!config.srs_secrets) {
+      config.srs_secrets = (char **) malloc((i+2)*sizeof(char *));
     } else {
-      while (CONFIG_srs_secrets[i]) i++;
-      *CONFIG_srs_secrets = (char **) realloc(*CONFIG_srs_secrets, (i+2)*sizeof(char *));
+      while (config.srs_secrets[i]) i++;
+      config.srs_secrets = (char **) realloc(config.srs_secrets, (i+2)*sizeof(char *));
     }
-    (*CONFIG_srs_secrets)[i] = strdup(buffer);
-    (*CONFIG_srs_secrets)[i+1] = NULL;
+    config.srs_secrets[i] = strdup(val);
+    config.srs_secrets[i+1] = NULL;
+
+  } else if (strcmp(key, "srs-alwaysrewrite") == 0) {
+    config.srs_alwaysrewrite = 1;
+
+  } else if (strcmp(key, "srs-hashlength") == 0) {
+    CHECK_VALUE(key);
+
+    config.srs_hashlength = atoi(val);
+
+  } else if (strcmp(key, "srs-hashmin") == 0) {
+    CHECK_VALUE(key);
+
+    config.srs_hashmin = atoi(val);
+
+  } else if (strcmp(key, "srs-maxage") == 0) {
+    CHECK_VALUE(key);
+
+    config.srs_maxage = atoi(val);
+
+  } else if (strcmp(key, "srs-separator") == 0) {
+    CHECK_VALUE(key);
+
+    config.srs_separator = val[0];
+
+  } else if (strcmp(key, "spf-check") == 0) {
+    config.spf_check = 1;
+
+  } else if (strcmp(key, "spf-heloname") == 0) {
+    CHECK_VALUE(key);
+
+    if (config.spf_heloname)
+      free(config.spf_heloname);
+    config.spf_heloname = strdup(val);
+
+  } else if (strcmp(key, "spf-address") == 0) {
+    CHECK_VALUE(key);
+
+    if (inet_pton(AF_INET, val, &config.spf_address) <= 0)
+      if (inet_pton(AF_INET6, val, &config.spf_address) <= 0) {
+        fprintf(stderr, "ERROR: invalid SPF address %s\n", val);
+        return 1;
+      }
+
+    config.spf_address_defined = 1;
+
+  } else {
+    fprintf(stderr, "WARN: unknown argument %s='%s'\n", key, val);
+
   }
 
-  fclose(f);
+  return 0;
+}
+
+int srs_milter_load_config(const char *filename) {
+  char line[MAXBUF];
+  int ret = 0;
+
+  FILE *file = fopen (filename, "r");
+  if (file == NULL) {
+    fprintf(stderr, "ERROR: unable to open config file %s\n", filename);
+    return 1;
+  }
+
+  /* parse config line */
+  while(fgets(line, sizeof(line), file) != NULL) {
+    char *key = line;
+    char *val = NULL;
+    char *pos = line+strlen(line)-1;
+
+    if (strlen(line) > 0 && line[0] == '#')
+      continue;
+
+    while (pos >= key && (*pos == '\n' || *pos == ' ')) {
+      *pos = '\0';
+      pos--;
+    }
+
+    if (strlen(key) == 0)
+      continue;
+
+    pos = strchr(line, '=');
+    if (pos) {
+      val = pos+1;
+      while (*val == ' ' && *val != '\0') val++;
+      do {
+        *pos = '\0';
+        pos--;
+      } while (pos >= key && *pos == ' ');
+    }
+
+    ret += srs_milter_configure(key, val);
+  }
 
-  return NULL;
+  fclose(file);
+
+  return ret;
 }
 
 int is_local_addr(const char *addr) {
@@ -118,22 +255,22 @@
   if (!addr)
     return 0;
 
-  if (!CONFIG_domains)
+  if (!config.domains)
     return 0;
 
   dom  = strrchr(addr, '@')+1;
   if (!dom)
     dom = addr;
 
-  for (i = 0; CONFIG_domains[i]; i++) {
+  for (i = 0; config.domains[i]; i++) {
 
     // exact domain name match
-    if (strcasecmp(dom, CONFIG_domains[i]) == 0)
+    if (strcasecmp(dom, config.domains[i]) == 0)
       return 1;
 
     // match subdomain
-    r = strlen(dom) - strlen(CONFIG_domains[i]);
-    if (r > 0 && CONFIG_domains[i][0] == '.' && strcasecmp(dom + r, CONFIG_domains[i]) == 0)
+    r = strlen(dom) - strlen(config.domains[i]);
+    if (r > 0 && config.domains[i][0] == '.' && strcasecmp(dom + r, config.domains[i]) == 0)
       return 1;
 
   }
@@ -183,7 +320,7 @@
     memset(td, '\0', sizeof(struct srs_milter_thread_data));
     td->num = ++threads; // this should be done in thread-safe way
 
-    if (CONFIG_verbose)
+    if (config.verbose)
       syslog(LOG_DEBUG, "conn# ?[?] - xxfi_srs_milter_connect(\"%s\", %p): created new thread %i data",
              hostname, hostaddr, td->num);
 
@@ -198,13 +335,13 @@
   // allocate connection specific data
   cd = (struct srs_milter_connection_data*) malloc(sizeof(struct srs_milter_connection_data));
   if (!cd) {
-    if (CONFIG_verbose)
+    if (config.verbose)
       syslog(LOG_DEBUG, "conn# ?[?] - xxfi_srs_milter_connect(\"%s\", %p): can't allocate memory for connection data",
              hostname, hostaddr);
     return SMFIS_TEMPFAIL;
   }
   if (smfi_setpriv(ctx, (void*) cd) != MI_SUCCESS) {
-    if (CONFIG_verbose)
+    if (config.verbose)
       syslog(LOG_DEBUG, "conn# ?[?] - xxfi_srs_milter_connect(\"%s\", %p): can't set ctx data",
              hostname, hostaddr);
     return SMFIS_TEMPFAIL;
@@ -214,7 +351,7 @@
   cd->state = SS_STATE_NULL;
   cd->num = ++connections; // this should be done in thread-safe way
 
-  if (CONFIG_verbose)
+  if (config.verbose)
     syslog(LOG_DEBUG, "conn# %d[%i] - xxfi_srs_milter_connect(\"%s\", hostaddr)",
            cd->num, cd->state, hostname);
 
@@ -232,13 +369,13 @@
   if (cd->state & SS_STATE_INVALID_CONN)
     return SMFIS_CONTINUE;
 
-  if (CONFIG_verbose)
+  if (config.verbose)
     syslog(LOG_DEBUG, "conn# %d[%i] - xxfi_srs_milter_envfrom(\"%s\")",
            cd->num, cd->state, argv[0]);
 
   if (strlen(argv[0]) < 1 || strcmp(argv[0], "<>") == 0 || argv[0][0] != '<' || argv[0][strlen(argv[0])-1] != '>' || !strchr(argv[0], '@')) {
     cd->state |= SS_STATE_INVALID_MSG;
-    if (CONFIG_verbose)
+    if (config.verbose)
       syslog(LOG_DEBUG, "conn# %d[%i] - xxfi_srs_milter_envfrom(\"%s\"): skipping \"MAIL FROM: %s\"",
              cd->num, cd->state, argv[0], argv[0]);
     return SMFIS_CONTINUE;
@@ -312,7 +449,7 @@
   if (cd->state & SS_STATE_INVALID_CONN)
     return SMFIS_CONTINUE;
 
-  if (CONFIG_verbose)
+  if (config.verbose)
     syslog(LOG_DEBUG, "conn# %d[%i] - xxfi_srs_milter_envrcpt(\"%s\")",
            cd->num, cd->state, argv[0]);
 
@@ -375,7 +512,7 @@
   char *queue_id = smfi_getsymval(ctx, "{i}");
   if (!queue_id) queue_id = "unknown";
 
-  if (CONFIG_verbose)
+  if (config.verbose)
     syslog(LOG_DEBUG, "conn# %d[%i][%s] - xxfi_srs_milter_eom()", cd->num, cd->state, queue_id);
 
   int fix_envfrom = 0;
@@ -383,9 +520,9 @@
   // non-local sender to non-local recipient
   // SPF can prevent forwarding, check if it is the case
   // for this particular sender domain
-  if (CONFIG_forward && !is_local_addr(cd->sender) && cd->recip_remote) {
+  if (config.forward && !is_local_addr(cd->sender) && cd->recip_remote) {
 
-    if (CONFIG_srs_alwaysrewrite || !CONFIG_spf_check) {
+    if (config.srs_alwaysrewrite || !config.spf_check) {
 
       fix_envfrom = 1;
 
@@ -407,11 +544,11 @@
 
       while (1) {
         if (!td->spf) {
-          if (CONFIG_verbose)
+          if (config.verbose)
             syslog(LOG_DEBUG, "conn# %d[%i][%s][%i] - xxfi_srs_milter_eom(): SPF_server_new",
                    cd->num, cd->state, queue_id, td->num);
 
-          if (!(td->spf = SPF_server_new(SPF_DNS_CACHE, CONFIG_verbose))) {
+          if (!(td->spf = SPF_server_new(SPF_DNS_CACHE, config.verbose))) {
             syslog(LOG_NOTICE, "conn# %d[%i][%s][%i] - xxfi_srs_milter_eom(): libspf2 error SPF_server_new",
                    cd->num, cd->state, queue_id, td->num);
             break;
@@ -430,15 +567,15 @@
           break;
         }
 
-        if (CONFIG_spf_address.in.sin_family == AF_INET) {
-          SPF_request_set_ipv4(spf_request, CONFIG_spf_address.in.sin_addr);
-          inet_ntop(AF_INET, &CONFIG_spf_address.in.sin_addr, host, sizeof(host));
+        if (config.spf_address.in.sin_family == AF_INET) {
+          SPF_request_set_ipv4(spf_request, config.spf_address.in.sin_addr);
+          inet_ntop(AF_INET, &config.spf_address.in.sin_addr, host, sizeof(host));
         } else {
-          SPF_request_set_ipv6(spf_request, CONFIG_spf_address.in6.sin6_addr);
-          inet_ntop(AF_INET6, &CONFIG_spf_address.in6.sin6_addr, host, sizeof(host));
+          SPF_request_set_ipv6(spf_request, config.spf_address.in6.sin6_addr);
+          inet_ntop(AF_INET6, &config.spf_address.in6.sin6_addr, host, sizeof(host));
         }
 
-        spf_ret = SPF_request_set_helo_dom(spf_request, CONFIG_spf_heloname);
+        spf_ret = SPF_request_set_helo_dom(spf_request, config.spf_heloname);
         if (spf_ret != SPF_E_SUCCESS) break;
         spf_ret = SPF_request_set_env_from(spf_request, cd->sender);
         if (spf_ret != SPF_E_SUCCESS) break;
@@ -447,10 +584,10 @@
 
         if (spf_response) {
           SPF_result_t spf_result = SPF_response_result(spf_response);
-          if (CONFIG_verbose)
+          if (config.verbose)
             syslog(LOG_DEBUG, "conn# %d[%i][%s][%i] - xxfi_srs_milter_eom(): spf(%s, %s, %s) = %i (%s)",
                    cd->num, cd->state, queue_id, td->num,
-                   host, CONFIG_spf_heloname,
+                   host, config.spf_heloname,
                    cd->sender, spf_ret, SPF_strresult(spf_ret));
           // TODO: make this configurable
           // (I'm not sure if SRS "MAIL FROM:" sender adress format can
@@ -460,10 +597,10 @@
           if (spf_result == SPF_RESULT_FAIL || spf_result == SPF_RESULT_SOFTFAIL)
             fix_envfrom = 1;
         } else {
-          if (CONFIG_verbose)
+          if (config.verbose)
             syslog(LOG_DEBUG, "conn# %d[%i][%s][%i] - xxfi_srs_milter_eom(): spf(%s, %s, %s) NULL response?!",
                    cd->num, cd->state, queue_id, td->num, host,
-                   CONFIG_spf_heloname, cd->sender);
+                   config.spf_heloname, cd->sender);
         }
 
         break;
@@ -484,14 +621,14 @@
   }
 
   // debug log gathered data...
-  if (CONFIG_verbose) {
+  if (config.verbose) {
     int i = 0;
     syslog(LOG_DEBUG, "conn# %d[%i][%s] - xxfi_srs_milter_eom(): forward = %i, fix_envfrom = %i%s",
-           cd->num, cd->state, queue_id, CONFIG_forward, fix_envfrom,
+           cd->num, cd->state, queue_id, config.forward, fix_envfrom,
            cd->recip_remote ? " (message has remote recipient)" : "");
     for (i = 0; cd->recip && cd->recip[i]; i++);
     syslog(LOG_DEBUG, "conn# %d[%i][%s] - xxfi_srs_milter_eom(): reverse = %i, rewrite_count = %i",
-           cd->num, cd->state, queue_id, CONFIG_reverse, i);
+           cd->num, cd->state, queue_id, config.reverse, i);
     syslog(LOG_DEBUG, "conn# %d[%i][%s] - xxfi_srs_milter_eom(): sender = %s%s",
            cd->num, cd->state, queue_id, cd->sender,
            is_local_addr(cd->sender) ? " (local)" : "");
@@ -502,7 +639,7 @@
   }
 
   // now, do some SRS magic...
-  if (fix_envfrom || (CONFIG_reverse && cd->recip)) {
+  if (fix_envfrom || (config.reverse && cd->recip)) {
     int i;
     struct srs_milter_thread_data* td;
 
@@ -515,7 +652,7 @@
     }
 
     if (!td->srs) { // initialize & configure SRS
-      if (CONFIG_verbose)
+      if (config.verbose)
         syslog(LOG_DEBUG, "conn# %d[%i][%s][%i] - xxfi_srs_milter_eom(): srs_new",
                cd->num, cd->state, queue_id, td->num);
 
@@ -527,18 +664,18 @@
         return SMFIS_CONTINUE;
       }
 
-      if (CONFIG_srs_alwaysrewrite > 0)
-        srs_set_alwaysrewrite(td->srs, CONFIG_srs_alwaysrewrite);
-      if (CONFIG_srs_hashlength > 0)
-        srs_set_hashlength(td->srs, CONFIG_srs_hashlength);
-      if (CONFIG_srs_hashmin > 0)
-        srs_set_hashmin(td->srs, CONFIG_srs_hashmin);
-      if (CONFIG_srs_maxage > 0)
-        srs_set_maxage(td->srs, CONFIG_srs_maxage);
-      if (CONFIG_srs_separator != 0)
-        srs_set_separator(td->srs, CONFIG_srs_separator);
-      for (i = 0; CONFIG_srs_secrets && CONFIG_srs_secrets[i]; i++)
-        srs_add_secret(td->srs, CONFIG_srs_secrets[i]);
+      if (config.srs_alwaysrewrite > 0)
+        srs_set_alwaysrewrite(td->srs, config.srs_alwaysrewrite);
+      if (config.srs_hashlength > 0)
+        srs_set_hashlength(td->srs, config.srs_hashlength);
+      if (config.srs_hashmin > 0)
+        srs_set_hashmin(td->srs, config.srs_hashmin);
+      if (config.srs_maxage > 0)
+        srs_set_maxage(td->srs, config.srs_maxage);
+      if (config.srs_separator != 0)
+        srs_set_separator(td->srs, config.srs_separator);
+      for (i = 0; config.srs_secrets && config.srs_secrets[i]; i++)
+        srs_add_secret(td->srs, config.srs_secrets[i]);
     }
 
     int srs_res;
@@ -546,25 +683,25 @@
 
     if (fix_envfrom) {
       // modify MAIL FROM: address to SRS format
-      if ((srs_res = srs_forward_alloc(td->srs, &out, cd->sender, CONFIG_srs_domain)) == SRS_SUCCESS) {
+      if ((srs_res = srs_forward_alloc(td->srs, &out, cd->sender, config.srs_domain)) == SRS_SUCCESS) {
         if (smfi_chgfrom(ctx, out, NULL) != MI_SUCCESS) {
           syslog(LOG_ERR, "conn# %d[%i][%s][%i] - xxfi_srs_milter_eom(): smfi_chgfrom(ctx, %s, NULL) failed",
                  cd->num, cd->state, queue_id, td->num, out);
         } else {
-          if (CONFIG_verbose)
+          if (config.verbose)
             syslog(LOG_DEBUG, "conn# %d[%i][%s][%i] - xxfi_srs_milter_eom(): smfi_chgfrom(ctx, %s, NULL) OK",
                    cd->num, cd->state, queue_id, td->num, out);
         }
       } else {
         syslog(LOG_ERR, "conn# %d[%i][%s][%i] - xxfi_srs_milter_eom(): srs_forward_alloc(srs, out, %s, %s) failed: %i (%s)",
-               cd->num, cd->state, queue_id, td->num, cd->sender, CONFIG_srs_domain, srs_res, srs_strerror(srs_res));
+               cd->num, cd->state, queue_id, td->num, cd->sender, config.srs_domain, srs_res, srs_strerror(srs_res));
       }
 
       if (out)
         free(out);
     }
 
-    if (CONFIG_reverse && cd->recip) {
+    if (config.reverse && cd->recip) {
       // modify RCPT TO: by removing SRS format
       for (i = 0; cd->recip[i]; i++) {
         if ((srs_res = srs_reverse_alloc(td->srs, &out, cd->recip[i])) == SRS_SUCCESS) {
@@ -575,7 +712,7 @@
             syslog(LOG_ERR, "conn# %d[%i][%s] - xxfi_srs_milter_eom(): smfi_addrcpt(ctx, %s) failed",
                    cd->num, cd->state, queue_id, out);
           } else {
-            if (CONFIG_verbose)
+            if (config.verbose)
               syslog(LOG_DEBUG, "conn# %d[%i][%s] - xxfi_srs_milter_eom(): smfi_{del,add}rcpt(%s, %s) OK",
                      cd->num, cd->state, queue_id, cd->recip[i], out);
           }
@@ -601,9 +738,13 @@
   struct srs_milter_connection_data* cd =
           (struct srs_milter_connection_data*) smfi_getpriv(ctx);
 
-  if (CONFIG_verbose)
-    syslog(LOG_DEBUG, "conn# %d[%i] - xxfi_srs_milter_close()",
-           cd->num, cd->state);
+  if (config.verbose) {
+    if (cd)
+      syslog(LOG_DEBUG, "conn# %d[%i] - xxfi_srs_milter_close()",
+             cd->num, cd->state);
+    else
+      syslog(LOG_DEBUG, "conn# ?[not_connected] - xxfi_srs_milter_close()");
+  }
 
   if (!cd)
     return SMFIS_CONTINUE;
@@ -703,15 +844,17 @@
   printf("  %s [--forward] [--reverse] \\\n", argv0);
   printf("    --socket unix:/var/run/srs-milter.sock \\\n");
   printf("    --srs-domain=example.com --srs-secret-file=secret-file \\\n");
-  printf("    [--domain=example.com] [--domain=.example.com ...]\n");
+  printf("    [--local-domain=example.com] [--local-domain=.example.com ...]\n");
   printf("\n");
   printf("options:\n");
   printf("  -h, --help\n");
   printf("      this help message\n");
-  printf("  -d, --debug\n");
-  printf("      don't daemonize this process\n");
   printf("  -v, --verbose\n");
   printf("      verbose output\n");
+  printf("  -d, --daemon\n");
+  printf("      daemonize this process\n");
+  printf("  -C, --config\n");
+  printf("      configuration file (use long variant of command line options)\n");
   printf("  -P, --pidfile\n");
   printf("      filename where to store process PID\n");
   printf("  -s, --socket\n");
@@ -724,7 +867,7 @@
   printf("      SRS encode the envelope sender of non-local-destined mail\n");
   printf("  -r, --reverse\n");
   printf("      SRS decode any envelope recipients of local SRS addresses\n");
-  printf("  -m, --domain\n");
+  printf("  -m, --local-domain\n");
   printf("      all local mail domains for that we accept mail\n");
   printf("      starting domain name with \".\" match also all subdomains\n");
   printf("  -o, --srs-domain\n");
@@ -741,7 +884,7 @@
   printf("  -x, --srs-maxage\n");
   printf("  -e, --srs-separator\n");
   printf("      SRS address separator, must be one of '+' '-' '=' (default: libsrs2 default)\n");
-  printf("  -c, --spf-check\n");
+  printf("  -k, --spf-check\n");
   printf("      use SRS only when sender's SPF record will (soft)fail us\n");
   printf("  -l, --spf-heloname\n");
   printf("      use this heloname for SPF checks (default: gethostname())\n");
@@ -755,40 +898,66 @@
 
 int main(int argc, char* argv[]) {
   int c, i;
-  int debug_flag = 0;
-  char *address = NULL;
+  int daemon = 0;
   FILE *f;
 
+  static struct option long_options[] = {
+    /* These options set a flag. */
+//    {"verbose", no_argument,       &verbose_flag, 1},
+//    {"brief",   no_argument,       &verbose_flag, 0},
+    /* These options don't set a flag.
+       We distinguish them by their indices. */
+    {"help",                   no_argument,       0, 'h'},
+    {"verbose",                no_argument,       0, 'v'},
+    {"daemon",                 no_argument,       0, 'd'},
+    {"config",                 required_argument, 0, 'C'},
+    {"pidfile",                required_argument, 0, 'P'},
+    {"socket",                 required_argument, 0, 's'},
+    {"timeout",                required_argument, 0, 't'},
+    {"forward",                no_argument,       0, 'f'},
+    {"reverse",                no_argument,       0, 'r'},
+    {"local-domain",           required_argument, 0, 'm'},
+    {"spf-check",              no_argument,       0, 'k'},
+    {"spf-heloname",           required_argument, 0, 'l'},
+    {"spf-address",            required_argument, 0, 'a'},
+    {"srs-domain",             required_argument, 0, 'o'},
+    {"srs-always",             no_argument,       0, 'y'},
+    {"srs-secret",             required_argument, 0, 'c'},
+    {"srs-secret-file",        required_argument, 0, 'C'},
+    {"srs-alwaysrewrite",      no_argument,       0, 'w'},
+    {"srs-hashlength",         required_argument, 0, 'g'},
+    {"srs-hashmin",            required_argument, 0, 'i'},
+    {"srs-maxage",             required_argument, 0, 'x'},
+    {"srs-separator",          required_argument, 0, 'e'},
+    {0, 0, 0, 0}
+  };
+
+  /* reset configuration */
+  memset(&config, 0, sizeof(config_t));
+
+  /* find config file in command line arguments */
+  while (1) {
+    /* getopt_long stores the option index here. */
+    int option_index = 0;
+
+    c = getopt_long(argc, argv, "hdvP:s:t:f:r:mk:t:l:a:o:yc:C:wg:i:x:e:",
+                    long_options, &option_index);
+
+    /* Detect the end of the options. */
+    if (c == -1)
+      break;
+
+    if (c != 'C')
+      continue;
+
+    if (srs_milter_load_config(optarg) != 0)
+      exit(EXIT_FAILURE);
+  }
+
+  /* reset getopt */
+  optind = 1;
+
   while (1) {
-    static struct option long_options[] = {
-      /* These options set a flag. */
-//      {"verbose", no_argument,       &verbose_flag, 1},
-//      {"brief",   no_argument,       &verbose_flag, 0},
-      /* These options don't set a flag.
-         We distinguish them by their indices. */
-      {"help",                   no_argument,       0, 'h'},
-      {"debug",                  no_argument,       0, 'd'},
-      {"verbose",                no_argument,       0, 'v'},
-      {"pidfile",                required_argument, 0, 'P'},
-      {"socket",                 required_argument, 0, 's'},
-      {"timeout",                required_argument, 0, 't'},
-      {"forward",                no_argument,       0, 'f'},
-      {"reverse",                no_argument,       0, 'r'},
-      {"local-domain",           required_argument, 0, 'm'},
-      {"spf-check",              no_argument,       0, 'k'},
-      {"spf-heloname",           required_argument, 0, 'l'},
-      {"spf-address",            required_argument, 0, 'a'},
-      {"srs-domain",             required_argument, 0, 'o'},
-      {"srs-always",             no_argument,       0, 'y'},
-      {"srs-secret",             required_argument, 0, 'c'},
-      {"srs-secret-file",        required_argument, 0, 'C'},
-      {"srs-alwaysrewrite",      no_argument,       0, 'w'},
-      {"srs-hashlength",         required_argument, 0, 'g'},
-      {"srs-hashmin",            required_argument, 0, 'i'},
-      {"srs-maxage",             required_argument, 0, 'x'},
-      {"srs-separator",          required_argument, 0, 'e'},
-      {0, 0, 0, 0}
-    };
     /* getopt_long stores the option index here. */
     int option_index = 0;
 
@@ -816,113 +985,78 @@
         break;
 
       case 'd':
-        debug_flag = 1;
+        daemon = 1;
         break;
 
       case 'v':
-        CONFIG_verbose = 1;
+        srs_milter_configure("verbose", NULL);
+        break;
+
+      case 'C':
         break;
 
       case 'P':
-        f = fopen(optarg, "w");
-        fprintf(f, "%i", (int) getpid());
-        fclose(f);
+        srs_milter_configure("pidfile", optarg);
         break;
 
       case 's':
-        CONFIG_socket = optarg;
+        srs_milter_configure("socket", optarg);
         break;
 
       case 't':
-        if (optarg == NULL || *optarg == '\0') {
-          fprintf(stderr, "ERROR: illegal timeout %s\n", optarg);
-          exit(EXIT_FAILURE);
-        }
-        if (smfi_settimeout(atoi(optarg)) == MI_FAILURE) {
-          fprintf(stderr, "ERROR: can't set milter timeout %s\n", optarg);
-          exit(EXIT_FAILURE);
-        }
+        srs_milter_configure("timeout", optarg);
         break;
 
       case 'f':
-        CONFIG_forward = 1;
+        srs_milter_configure("forward", NULL);
         break;
 
       case 'r':
-        CONFIG_reverse = 1;
+        srs_milter_configure("reverse", NULL);
         break;
 
       case 'm':
-        i = 0;
-        if (!CONFIG_domains) {
-          CONFIG_domains = (char **) malloc((i+2)*sizeof(char *));
-        } else {
-          while (CONFIG_domains[i]) i++;
-          CONFIG_domains = (char **) realloc(CONFIG_domains, (i+2)*sizeof(char *));
-        }
-        CONFIG_domains[i] = optarg;
-        CONFIG_domains[i+1] = NULL;
+        srs_milter_configure("local-domain", optarg);
         break;
 
       case 'k':
-        CONFIG_spf_check = 1;
+        srs_milter_configure("spf_check", NULL);
         break;
 
       case 'c':
-        i = 0;
-        if (!CONFIG_srs_secrets) {
-          CONFIG_srs_secrets = (char **) malloc((i+2)*sizeof(char *));
-        } else {
-          while (CONFIG_srs_secrets[i]) i++;
-          CONFIG_srs_secrets = (char **) realloc(CONFIG_srs_secrets, (i+2)*sizeof(char *));
-        }
-        CONFIG_srs_secrets[i] = strdup(optarg); // We free secrets on exit because some may be allocated from a file
-        CONFIG_srs_secrets[i+1] = NULL;
-        break;
-
-      case 'C':
-        {
-          char *err = srs_milter_load_file_secrets(&CONFIG_srs_secrets, optarg);
-          if (err) {
-            usage(argv[0]);
-            fprintf(stderr, err);
-            exit(EXIT_FAILURE);
-          }
-        }
+        srs_milter_configure("spf_secret", optarg);
         break;
 
       case 'l':
-        CONFIG_spf_heloname = optarg;
+        srs_milter_configure("spf_heloname", optarg);
         break;
 
       case 'a':
-        address = optarg;
+        srs_milter_configure("spf_address", optarg);
         break;
 
       case 'o':
-        if (CONFIG_srs_domain)
-          free(CONFIG_srs_domain);
-        CONFIG_srs_domain = strdup(optarg);
+        srs_milter_configure("srs_domain", optarg);
         break;
 
       case 'w':
-        CONFIG_srs_alwaysrewrite = 1;
+        srs_milter_configure("srs_alwaysrewrite", NULL);
         break;
 
       case 'g':
-        CONFIG_srs_hashlength = atoi(optarg);
+        srs_milter_configure("srs_hashlength", optarg);
         break;
 
       case 'i':
-        CONFIG_srs_hashmin = atoi(optarg);
+        srs_milter_configure("srs_hashmin", optarg);
         break;
 
       case 'x':
-        CONFIG_srs_maxage = atoi(optarg);
+        srs_milter_configure("srs_maxage", optarg);
         break;
 
       case 'e':
-        CONFIG_srs_separator = optarg[0];
+        srs_milter_configure("srs_separator", optarg);
         break;
 
       case '?':
@@ -979,40 +1113,32 @@
     // ???
 
     // validate configuration
-    if (!CONFIG_forward && !CONFIG_reverse) {
+    if (!config.forward && !config.reverse) {
       usage(argv[0]);
       fprintf(stderr, "ERROR: use forward or reverse (or both)\n");
       exit(EXIT_FAILURE);
     }
 
-    if (!CONFIG_socket) {
+    if (!config.socket) {
       usage(argv[0]);
       fprintf(stderr, "ERROR: missing socket configuration\n");
       exit(EXIT_FAILURE);
     }
 
-    if (!CONFIG_srs_domain || strlen(CONFIG_srs_domain) == 0) {
+    if (!config.srs_domain || strlen(config.srs_domain) == 0) {
       usage(argv[0]);
       fprintf(stderr, "ERROR: invalid or missing srs domain configuration\n");
       exit(EXIT_FAILURE);
     }
 
-    if (CONFIG_spf_check) {
+    if (config.spf_check) {
 
-      if (!CONFIG_spf_heloname) {
-        CONFIG_spf_heloname = (char *) malloc(64);
-        gethostname(CONFIG_spf_heloname, 63);
+      if (!config.spf_heloname) {
+        config.spf_heloname = (char *) malloc(64);
+        gethostname(config.spf_heloname, 63);
       }
 
-      if (address) {
-        if (inet_pton(AF_INET, address, &CONFIG_spf_address) <= 0)
-          if (inet_pton(AF_INET6, address, &CONFIG_spf_address) <= 0) {
-            usage(argv[0]);
-            fprintf(stderr, "ERROR: invalid SPF address %s\n", address);
-            exit(EXIT_FAILURE);
-          }
-      } else {
-
+      if (!config.spf_address_defined) {
         // get local address
         struct ifaddrs *ifAddrStruct = NULL;
         struct ifaddrs *ifa = NULL;
@@ -1027,10 +1153,10 @@
           if(ifa->ifa_flags & IFF_POINTOPOINT)
             continue;
           if (ifa->ifa_addr->sa_family == AF_INET) { // check it is IP4
-            memcpy(&CONFIG_spf_address.in, ifa->ifa_addr, sizeof(struct sockaddr_in));
+            memcpy(&config.spf_address.in, ifa->ifa_addr, sizeof(struct sockaddr_in));
             break;
 //          } else if (ifa->ifa_addr->sa_family == AF_INET6) { // check it is IP6
-//            memcpy(&CONFIG_spf_address.in6, ifa->ifa_addr, sizeof(struct sockaddr_in6));
+//            memcpy(&config.spf_address.in6, ifa->ifa_addr, sizeof(struct sockaddr_in6));
           }
         }
 
@@ -1039,7 +1165,7 @@
       }
     }
 
-    if (!CONFIG_srs_secrets || !CONFIG_srs_secrets[0]) {
+    if (!config.srs_secrets || !config.srs_secrets[0]) {
       usage(argv[0]);
       fprintf(stderr, "ERROR: missing srs-secrets configuration\n");
       exit(EXIT_FAILURE);
@@ -1049,23 +1175,23 @@
     int srs_res = SRS_SUCCESS;
 
     while (1) {
-      if (CONFIG_srs_alwaysrewrite > 0)
-        if ((srs_res = srs_set_alwaysrewrite(srs, CONFIG_srs_alwaysrewrite)) != SRS_SUCCESS)
+      if (config.srs_alwaysrewrite > 0)
+        if ((srs_res = srs_set_alwaysrewrite(srs, config.srs_alwaysrewrite)) != SRS_SUCCESS)
           break;
-      if (CONFIG_srs_hashlength > 0)
-        if ((srs_res = srs_set_hashlength(srs, CONFIG_srs_hashlength)) != SRS_SUCCESS)
+      if (config.srs_hashlength > 0)
+        if ((srs_res = srs_set_hashlength(srs, config.srs_hashlength)) != SRS_SUCCESS)
           break;
-      if (CONFIG_srs_hashmin > 0)
-        if ((srs_res = srs_set_hashmin(srs, CONFIG_srs_hashmin)) != SRS_SUCCESS)
+      if (config.srs_hashmin > 0)
+        if ((srs_res = srs_set_hashmin(srs, config.srs_hashmin)) != SRS_SUCCESS)
           break;
-      if (CONFIG_srs_maxage > 0)
-        if ((srs_res = srs_set_maxage(srs, CONFIG_srs_maxage)) != SRS_SUCCESS)
+      if (config.srs_maxage > 0)
+        if ((srs_res = srs_set_maxage(srs, config.srs_maxage)) != SRS_SUCCESS)
           break;
-      if (CONFIG_srs_separator != 0)
-        if ((srs_res = srs_set_separator(srs, CONFIG_srs_separator)) != SRS_SUCCESS)
+      if (config.srs_separator != 0)
+        if ((srs_res = srs_set_separator(srs, config.srs_separator)) != SRS_SUCCESS)
           break;
-      for (i = 0; CONFIG_srs_secrets && CONFIG_srs_secrets[i]; i++)
-        if ((srs_res = srs_add_secret(srs, CONFIG_srs_secrets[i])) != SRS_SUCCESS)
+      for (i = 0; config.srs_secrets && config.srs_secrets[i]; i++)
+        if ((srs_res = srs_add_secret(srs, config.srs_secrets[i])) != SRS_SUCCESS)
           break;
       break;
     }
@@ -1078,40 +1204,44 @@
     srs_free(srs);
 
     // print configuration
-    if (CONFIG_verbose) {
-      if (CONFIG_forward)
-        syslog(LOG_DEBUG, "config forward: %i", CONFIG_forward);
-      if (CONFIG_reverse)
-        syslog(LOG_DEBUG, "config reverse: %i", CONFIG_reverse);
-      if (CONFIG_socket)
-        syslog(LOG_DEBUG, "config socket: %s", CONFIG_socket);
-      for (i = 0; CONFIG_domains && CONFIG_domains[i]; i++)
-        syslog(LOG_DEBUG, "config local_mail_domains: %s", CONFIG_domains[i]);
-      if (CONFIG_srs_domain)
-        syslog(LOG_DEBUG, "config srs_domain: %s", CONFIG_srs_domain);
-      for (i = 0; CONFIG_srs_secrets && CONFIG_srs_secrets[i]; i++)
-        syslog(LOG_DEBUG, "config srs_secrets: %s", CONFIG_srs_secrets[i]);
-      if (CONFIG_srs_alwaysrewrite > 0)
-        syslog(LOG_DEBUG, "config srs_alwaysrewrite: %i", CONFIG_srs_alwaysrewrite);
-      if (CONFIG_srs_hashlength > 0)
-        syslog(LOG_DEBUG, "config srs_hashlength: %i", CONFIG_srs_hashlength);
-      if (CONFIG_srs_hashmin > 0)
-        syslog(LOG_DEBUG, "config srs_hashmin: %i", CONFIG_srs_hashmin);
-      if (CONFIG_srs_maxage > 0)
-        syslog(LOG_DEBUG, "config srs_maxage: %i", CONFIG_srs_maxage);
-      if (CONFIG_srs_separator != 0)
-        syslog(LOG_DEBUG, "config srs_separator: %c", CONFIG_srs_separator);
-      syslog(LOG_DEBUG, "config spf_check: %i", CONFIG_spf_check);
-      if (CONFIG_spf_check) {
-        if (CONFIG_spf_heloname)
-          syslog(LOG_DEBUG, "config spf_heloname: %s", CONFIG_spf_heloname);
-        if (CONFIG_spf_address.in.sin_family == AF_INET) {
+    if (config.verbose) {
+      if (config.pidfile)
+        syslog(LOG_DEBUG, "config pidfile: %s", config.pidfile);
+      if (config.forward)
+        syslog(LOG_DEBUG, "config forward: %i", config.forward);
+      if (config.reverse)
+        syslog(LOG_DEBUG, "config reverse: %i", config.reverse);
+      if (config.socket)
+        syslog(LOG_DEBUG, "config socket: %s", config.socket);
+      if (config.timeout)
+        syslog(LOG_DEBUG, "config timeout: %i", config.timeout);
+      for (i = 0; config.domains && config.domains[i]; i++)
+        syslog(LOG_DEBUG, "config local_domain: %s", config.domains[i]);
+      if (config.srs_domain)
+        syslog(LOG_DEBUG, "config srs_domain: %s", config.srs_domain);
+      for (i = 0; config.srs_secrets && config.srs_secrets[i]; i++)
+        syslog(LOG_DEBUG, "config srs_secret: %s", config.srs_secrets[i]);
+      if (config.srs_alwaysrewrite > 0)
+        syslog(LOG_DEBUG, "config srs_alwaysrewrite: %i", config.srs_alwaysrewrite);
+      if (config.srs_hashlength > 0)
+        syslog(LOG_DEBUG, "config srs_hashlength: %i", config.srs_hashlength);
+      if (config.srs_hashmin > 0)
+        syslog(LOG_DEBUG, "config srs_hashmin: %i", config.srs_hashmin);
+      if (config.srs_maxage > 0)
+        syslog(LOG_DEBUG, "config srs_maxage: %i", config.srs_maxage);
+      if (config.srs_separator != 0)
+        syslog(LOG_DEBUG, "config srs_separator: %c", config.srs_separator);
+      syslog(LOG_DEBUG, "config spf_check: %i", config.spf_check);
+      if (config.spf_check) {
+        if (config.spf_heloname)
+          syslog(LOG_DEBUG, "config spf_heloname: %s", config.spf_heloname);
+        if (config.spf_address.in.sin_family == AF_INET) {
           char host[INET_ADDRSTRLEN+1];
-          inet_ntop(AF_INET, &CONFIG_spf_address.in.sin_addr, host, INET_ADDRSTRLEN);
+          inet_ntop(AF_INET, &config.spf_address.in.sin_addr, host, INET_ADDRSTRLEN);
           syslog(LOG_DEBUG, "config spf_address: %s (IP)", host);
         } else {
           char host[INET_ADDRSTRLEN+1];
-          inet_ntop(AF_INET6, &CONFIG_spf_address.in6.sin6_addr, host, INET_ADDRSTRLEN);
+          inet_ntop(AF_INET6, &config.spf_address.in6.sin6_addr, host, INET_ADDRSTRLEN);
           syslog(LOG_DEBUG, "config spf_address: %s (IPv6)", host);
         }
       }
@@ -1120,17 +1250,33 @@
 
   {
     pid_t ppid = getpid();
-    if (!debug_flag) {
+    if (daemon) {
       daemonize();
       syslog(LOG_NOTICE, "daemonized PID %i", (int) ppid);
     }
   }
 
-  smfi_setconn(CONFIG_socket);
+  if (config.pidfile) {
+    f = fopen(config.pidfile, "w");
+    if (!f) {
+      fprintf(stderr, "ERROR: can't open PID file %s\n", config.pidfile);
+      exit(EXIT_FAILURE);
+    }
+    fprintf(f, "%i", (int) getpid());
+    fclose(f);
+  }
+
+  smfi_setconn(config.socket);
   if (smfi_register(smfilter) == MI_FAILURE) {
     fprintf(stderr, "%s: register failed\n", SRS_MILTER_NAME);
     exit(EXIT_FAILURE);
   }
+  if (config.timeout) {
+    if (smfi_settimeout(config.timeout) == MI_FAILURE) {
+      fprintf(stderr, "%s: can't set milter timeout to %i\n", SRS_MILTER_NAME, config.timeout);
+      exit(EXIT_FAILURE);
+    }
+  }
   if (smfi_main() == MI_FAILURE) {
     fprintf(stderr, "%s: milter failed\n", SRS_MILTER_NAME);
     exit(EXIT_FAILURE);
@@ -1138,7 +1284,14 @@
 
   // Free the secrets
   {
-    char **s = CONFIG_srs_secrets;
+    char **s = config.srs_secrets;
+    do {
+      free(*s);
+    } while (*++s != NULL);
+  }
+  // Free the secrets
+  {
+    char **s = config.domains;
     do {
       free(*s);
     } while (*++s != NULL);
